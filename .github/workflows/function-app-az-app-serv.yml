name: Function App CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - '**.md'
  pull_request:
    branches:
      - main

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: 'Release'
  RESOURCE_GROUP: 'Holonet'
  APP_NAME: 'Holonet-Func-Databank-8108'
  PROJECT_DIR: './src/Holonet.Databank.AppFunctions/Holonet.Databank.AppFunctions.csproj'
  PUBLISH_DIR: 'publish'

jobs:
  build-and-deploy:
    name: Build, Publish, Deploy (.NET 9 Isolated)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
            dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore
        run: dotnet restore ${{ env.PROJECT_DIR }}

      - name: Build
        run: dotnet build ${{ env.PROJECT_DIR }} -c ${{ env.CONFIGURATION }} --no-restore

      - name: Publish with detailed output
        run: |          
          dotnet publish ${{ env.PROJECT_DIR }} -c ${{ env.CONFIGURATION }} -o ${{ env.PUBLISH_DIR }} --no-build
          echo ""
          echo "=== Checking publish directory contents ==="
          ls -la ${{ env.PUBLISH_DIR }}/
          echo ""
          echo "=== Checking for critical files ==="
          if [ -f "${{ env.PUBLISH_DIR }}/host.json" ]; then
            echo "✓ host.json found"
            cat ${{ env.PUBLISH_DIR }}/host.json
          else
            echo "✗ host.json NOT found"
          fi
          echo ""
          if [ -f "${{ env.PUBLISH_DIR }}/Holonet.Databank.AppFunctions.dll" ]; then
            echo "✓ Main assembly found"
          else
            echo "✗ Main assembly NOT found"
          fi
          echo ""
          echo "=== Checking for function metadata ==="
          find ${{ env.PUBLISH_DIR }} -name "*.json" -o -name "functions.metadata" 2>/dev/null || echo "No metadata files found"

      - name: Create deployment package
        run: |
          cd ${{ env.PUBLISH_DIR }}
          zip -r ../app.zip . -x "*.pdb"
          cd ..
          echo "=== Zip file created ==="
          ls -la app.zip

      - name: Verify deployment package contents
        run: |
          echo "=== Verifying zip file contents ==="
          unzip -l app.zip | head -30
          echo ""
          echo "=== Critical files check ==="
          unzip -l app.zip | grep -E "(host\.json|Holonet\.Databank\.AppFunctions\.dll|\.deps\.json)" || echo "WARNING: Some critical files may be missing"
          echo ""
          echo "=== Function metadata check ==="
          unzip -l app.zip | grep -E "(functions\.metadata|\.azurefunctions)" || echo "INFO: Function metadata files not found"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy via OneDeploy (zip)
        run: |
          echo "=== Deploying to Azure Function App ==="
          az functionapp deployment source config-zip \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --src app.zip \
            --timeout 600

      - name: Restart and wait for Function App
        run: |
          echo "=== Restarting Function App ==="
          az functionapp restart \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }}
          echo "Waiting 30 seconds for restart to complete..."
          sleep 30

      - name: Check Function App status and logs
        run: |
          echo "=== Function App Status ==="
          az functionapp show \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "{name:name, state:state, hostNames:defaultHostName, linuxFxVersion:siteConfig.linuxFxVersion}"
          echo ""
          
      - name: List functions (if any are discovered)
        run: |
          echo "=== Attempting to list functions ==="
          az functionapp function list \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} || echo "No functions found or error listing functions"
