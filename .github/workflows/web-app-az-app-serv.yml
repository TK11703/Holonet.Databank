name: Web App CI/CD

on:
  workflow_dispatch:
    inputs:
      shouldRun:
        description: 'True to override all checks and run the workflow, False otherwise'
        required: true
        type: boolean
  workflow_call:
    inputs:
      shouldRun:
        required: true
        type: boolean
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - '**.md'
  pull_request:
    branches:
      - main

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: 'Release'
  RESOURCE_GROUP: 'Holonet'
  APP_NAME: 'Holonet-App-Databank-8108'
  PROJECT_DIR: './src/Holonet.Databank.Web/Holonet.Databank.Web.csproj'
  PUBLISH_DIR: 'publish'
  
jobs:
  determine-execution-condition:
    runs-on: ubuntu-latest
    outputs:
      shouldRun: ${{ steps.setFlag.outputs.shouldRun }}
    steps:
      - id: setFlag
        run: |
          if [[ "${{ github.event_name }}" == "push" && \
                ("${{ github.event.head_commit.message }}" == *"#web"* || \
                 "${{ github.event.head_commit.message }}" == *"#webapp"*) ]]; then
            echo "shouldRun=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" && \
                ("${{ github.event.head_commit.message }}" == *"#web"* || \
                    "${{ github.event.head_commit.message }}" == *"#webapp"*) ]]; then
            echo "shouldRun=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.shouldRun }}" == "true" ]]; then
            echo "shouldRun=true" >> $GITHUB_OUTPUT
          else
            echo "shouldRun=false" >> $GITHUB_OUTPUT
          fi
  build-and-test:
    needs: determine-execution-condition
    if: ${{ needs.determine-execution-condition.outputs.shouldRun == 'true' }}
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_DIR }}

      - name: Build
        run: dotnet build ${{ env.PROJECT_DIR }} -c ${{ env.CONFIGURATION }} --no-restore

      # Optional: Run tests if you have them
      # - name: Run tests
      #   run: dotnet test ${{ env.PROJECT_DIR }} -c ${{ env.CONFIGURATION }} --no-build --verbosity normal

      - name: Publish
        run: dotnet publish ${{ env.PROJECT_DIR }} -c ${{ env.CONFIGURATION }} -o ${{ env.PUBLISH_DIR }} --no-build --no-restore

      - name: Create deployment package
        run: |
          cd ${{ env.PUBLISH_DIR }}
          zip -r ../web-app.zip . -x "*.pdb"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-app-package
          path: web-app.zip
          retention-days: 7

  deploy:
    if: ${{ needs.determine-execution-condition.outputs.shouldRun == 'true' }}
    name: Publish Web
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-app-package
        
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          slot-name: 'Production'
          package: web-app.zip
          
      - name: Restart App Service (Ensure clean deployment)
        run: |
          az webapp  restart \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }}

      - name: Verify deployment health
        run: |
          # Wait a moment for the app to start
          sleep 30
          
          # Check app state
          APP_STATE=$(az webapp show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APP_NAME }} --query "state" -o tsv)
          echo "Web App state: $APP_STATE"
          
          # Get the app URL
          HOSTNAME=$(az webapp show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APP_NAME }} --query "defaultHostName" -o tsv)
          echo "Web App URL: https://$HOSTNAME"
          
          # Optional: Test a health endpoint if you have one
          # curl -f "https://$HOSTNAME/api/health" || echo "Health check failed or endpoint not available"
          
          echo "âœ… Deployment completed successfully!"
          echo "Check Application Insights for detailed logs and metrics."
