name: Function App CI/CD (Flex Consumption)

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - '**.md'
  pull_request:
    branches:
      - main

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: 'Release'
  RESOURCE_GROUP: 'Holonet'
  APP_NAME: 'Holonet-Func-Databank-8108'
  PROJECT_DIR: './src/Holonet.Databank.AppFunctions/Holonet.Databank.AppFunctions.csproj'
  PUBLISH_DIR: 'publish'

# Required for OIDC authentication (recommended for Flex Consumption)
permissions:
  id-token: write
  contents: read

jobs:
  build-and-test:
    if: contains(github.event.head_commit.message, '#function') || 
        contains(github.event.head_commit.message, '#func') || 
        contains(github.event.head_commit.message, '#functionapp')
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_DIR }}

      - name: Build
        run: dotnet build ${{ env.PROJECT_DIR }} -c ${{ env.CONFIGURATION }} --no-restore

      # Optional: Run tests if you have them
      # - name: Run tests
      #   run: dotnet test ${{ env.PROJECT_DIR }} -c ${{ env.CONFIGURATION }} --no-build --verbosity normal

      - name: Publish
        run: dotnet publish ${{ env.PROJECT_DIR }} -c ${{ env.CONFIGURATION }} -o ${{ env.PUBLISH_DIR }} --no-build --no-restore -v:detailed

      - name: Create deployment package
        run: |
          cd ${{ env.PUBLISH_DIR }}
          zip -r ../function-app.zip . -x "*.pdb"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: function-app-package
          path: function-app.zip
          retention-days: 7

  deploy:
    if: contains(github.event.head_commit.message, '#function') || 
        contains(github.event.head_commit.message, '#func') || 
        contains(github.event.head_commit.message, '#functionapp')
    name: Deploy to Azure (Flex Consumption)
    runs-on: ubuntu-latest
    needs: build-and-test
    # if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: production # Optional: Use GitHub environments for additional protection
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: function-app-package

      # Option 1: OIDC Authentication (Recommended for Flex Consumption)
      #- name: Azure Login (OIDC)
      #  uses: azure/login@v2
      #  with:
      #    client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #    tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #    subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Option 2: Service Principal Authentication (Alternative)
      # Uncomment this and comment out the OIDC step above if you prefer SP auth
      - name: Azure Login (Service Principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify Function App is on Flex Consumption plan
        run: |
          COMPUTE_MODE=$(az functionapp show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APP_NAME }} --query "computeMode" -o tsv)
          echo "Current compute mode: $COMPUTE_MODE"
          if [ "$COMPUTE_MODE" != "FlexConsumption" ]; then
            echo "⚠️  Warning: Function App is not on Flex Consumption plan (current: $COMPUTE_MODE)"
          else
            echo "✅ Confirmed: Function App is on Flex Consumption plan"
          fi

      - name: Deploy to Azure Function App
        run: |
          echo "Deploying to Function App: ${{ env.APP_NAME }}"
          az functionapp deployment source config-zip \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --src function-app.zip \
            --timeout 300

      - name: Restart Function App (Ensure clean deployment)
        run: |
          az functionapp restart \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }}

      - name: Verify deployment health
        run: |
          # Wait a moment for the app to start
          sleep 30
          
          # Check app state
          APP_STATE=$(az functionapp show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APP_NAME }} --query "state" -o tsv)
          echo "Function App state: $APP_STATE"
          
          # Get the function app URL
          HOSTNAME=$(az functionapp show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.APP_NAME }} --query "defaultHostName" -o tsv)
          echo "Function App URL: https://$HOSTNAME"
          
          # Optional: Test a health endpoint if you have one
          # curl -f "https://$HOSTNAME/api/health" || echo "Health check failed or endpoint not available"
          
          echo "✅ Deployment completed successfully!"
          echo "Check Application Insights for detailed logs and metrics."

  # Optional: Cleanup job for PR deployments or staging slots
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Add any cleanup logic here if needed
      - name: Cleanup resources
        run: echo "Add cleanup logic if needed for PR environments"
