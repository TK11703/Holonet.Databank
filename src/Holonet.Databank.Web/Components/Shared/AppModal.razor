<div class="modal @(showModal ? "d-block": "d-none")" tabindex="-1">
    <div class="modal-dialog @(ModalSize)">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @Body
                @Specifics
            </div>
            <div class="modal-footer">
                @Footer
            </div>
        </div>
    </div>
</div>

@if (showModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    public enum ModalSizeOptions
	{
		Small,
        Medium,
		Large,
		ExtraLarge
	}
    [Parameter]
    public RenderFragment Title { get; set; } = new RenderFragment(x => x.AddContent(0, string.Empty));
    [Parameter]
    public RenderFragment Body { get; set; } = new RenderFragment(x => x.AddContent(0, string.Empty));
    [Parameter]
    public RenderFragment Specifics { get; set; } = new RenderFragment(x => x.AddContent(0, string.Empty));
    [Parameter]
    public RenderFragment Footer { get; set; } = new RenderFragment(x => x.AddContent(0, string.Empty));
    
    private bool showModal = false;
    private string ModalSize = string.Empty;

    public void SetSpecifics(RenderFragment specific)
    {
        Specifics = specific;
    }

    public void SetSize(ModalSizeOptions sizeOption)
    {
        switch (sizeOption)
		{
			case ModalSizeOptions.Small:
				ModalSize = "modal-sm";
				break;
			case ModalSizeOptions.Medium:
				ModalSize = string.Empty;
				break;
			case ModalSizeOptions.Large:
				ModalSize = "modal-lg";
				break;
			case ModalSizeOptions.ExtraLarge:
				ModalSize = "modal-xl";
				break;
		}
    }

    public void Open()
    {
        showModal = true;
    }

    public void Close()
    {
        showModal = false;
    }
}