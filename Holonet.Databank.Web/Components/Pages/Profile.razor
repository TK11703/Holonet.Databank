@page "/profile"
@using Holonet.Databank.Core
@using Holonet.Databank.Web.Clients
@using Holonet.Databank.Web.Services
@using Holonet.Databank.Web.Models
@using Microsoft.Graph.Models
@using Microsoft.Identity.Web
@inject GraphApiClient graphClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject AuthorMaintenanceService authorMaintenanceService
@inject IToastService ToastService
@attribute [Authorize]

<PageTitle>User Profile</PageTitle>

<h3>User Data</h3>
<p class="small">User data was retrieved from Entra using the Graph API.</p>
<table class="table">
	<thead>
		<tr>
			<th>Information Type</th>
			<th>Value</th>
		</tr>
	</thead>
	@if (user == null)
	{
		<tbody>
			<tr>
				<td colspan="2">
					<div class="spinner"></div>
					<p>Loading...</p>
				</td>
			</tr>
		</tbody>
	}
	else
	{
		<tbody>
			<tr>
				<td>Email Address</td>
				<td>
					@if (!string.IsNullOrEmpty(user?.Mail))
					{
						@user.Mail
					}
				</td>
			</tr>
			<tr>
				<td>Display Name</td>
				<td>
					@if (!string.IsNullOrEmpty(user?.DisplayName))
					{
						@user.DisplayName
					}
				</td>
			</tr>
			<tr>
				<td>Mobile Phone</td>
				<td>
					@if (!string.IsNullOrEmpty(user?.MobilePhone))
					{
						@user.MobilePhone
					}
				</td>
			</tr>
		</tbody>
	}
</table>

<UserClaims />
<AuthorizeView Roles="@ApplicationRole.Administrator">
	<Authorized>						
		<h3>User Bearer Token</h3>
		<p class="small">An administrator will be able to see their bearer token for diagnostics.</p>
		<textarea class="form-control" rows="5" readonly="readonly">@bearerToken</textarea>
	</Authorized>
</AuthorizeView>

@code {
	private User? user { get; set; }
	private string? bearerToken { get; set; }
	protected async override Task OnInitializedAsync()
	{
		try
		{
			user = await graphClient.GetGraphApiUser();
		}
		catch (Exception ex)
		{
			ConsentHandler.HandleException(ex);
		}

		if (user != null)
		{
			await authorMaintenanceService.AddOrUpdateAuthenticatedUser(user.DisplayName ?? string.Empty, user.Mail ?? string.Empty);
			ToastService.ShowSuccess("Your profile information was automatically saved/updated.");
		}

		try
		{
			bearerToken = await authorMaintenanceService.GetBearerTokenForDiagnostic();
		}
		catch (Exception ex)
		{
			throw new Exception("Unable to output the bearertoken for diagnostic", ex);
		}
	}
}
